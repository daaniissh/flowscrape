// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model WorkFlow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  definition String
  status     String

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?

  excecution WorkflowExecution[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([name, userId])
}

model WorkflowExecution {
  id          String           @id @default(cuid())
  workflowId  String
  userId      String
  trigger     String
  status      String
  createdAt   DateTime         @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  creditsCost Int?             @default(0)
  phases      ExecutionPhase[] @relation(name: "ExecutionPhases")
  workflow    WorkFlow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  definition  String           @default("{}")
}

model ExecutionPhase {
  id          String    @id @default(cuid())
  userId      String
  status      String
  number      Int
  node        String
  name        String
  startedAt   DateTime?
  completedAt DateTime?
  inputs      String?
  outputs     String?
  creditsCost Int?

  workflowExecutionId String
  execution           WorkflowExecution @relation(name: "ExecutionPhases", fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs        ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance{
  userId String @id
  credits Int @default(0)
}